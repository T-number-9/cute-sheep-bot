import logging
import sqlite3
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler
import sheep
from config import TOKEN


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)


def first_message(user_id, user_name):
    conn = sqlite3.connect('sheeps.db')
    cursor = conn.cursor()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    # –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if result is None:
        cursor.execute('INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (user_id, user_name,
                                                                                         1, 0, 0, 100, '–ü–æ–¥—Å—Ç—Ä–∏—á—å',
                                                                                         True, 180, 0, 1, True))
        cursor.execute('INSERT INTO items VALUES (?, ?, ?)', (user_id, user_name, 0))
        cursor.execute('INSERT INTO foods VALUES (?, ?)', (user_id, user_name))
        conn.commit()
        return True
    return False


async def start(update, context):
    # –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    user_id, first_name = update.message.from_user.id, update.message.from_user.first_name
    if first_message(user_id, first_name):
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∏—Ç–æ–º—Ü–µ
        await sheep.my_sheep(update, context)
    else:
        await update.message.reply_text('üêë –¢–≤–æ—è –ª—é–±–∏–º–∞—è –æ–≤–µ—á–∫–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /sheep')


async def help(update, context):
    # –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    await update.message.reply_text('üêë –¢–≤–æ—è –ª—é–±–∏–º–∞—è –æ–≤–µ—á–∫–∞ —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /sheep \n'
                                    'üèî –ì—É–ª—è—Ç—å –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /walk')


def main():
    application = Application.builder().token(TOKEN).build()
    # text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_check)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sheep", sheep.my_sheep))
    application.add_handler(CommandHandler("walk", sheep.walk))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("trade", sheep.trade))
    application.add_handler(CallbackQueryHandler(sheep.button))
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
